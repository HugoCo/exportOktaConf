[{"string":"[{\"string\":\"{\\\"id\\\":\\\"00gc8o4dyVetkcpz65d6\\\",\\\"created\\\":\\\"2021-03-19T09:49:24.000Z\\\",\\\"lastUpdated\\\":\\\"2021-04-01T09:52:08.000Z\\\",\\\"lastMembershipUpdated\\\":\\\"2021-03-19T09:50:39.000Z\\\",\\\"objectClass\\\":[\\\"okta:user_group\\\"],\\\"type\\\":\\\"OKTA_GROUP\\\",\\\"profile\\\":{\\\"name\\\":\\\"iwaos\\\",\\\"description\\\":\\\"le club des iwao\\\"},\\\"_links\\\":{\\\"logo\\\":[{\\\"name\\\":\\\"medium\\\",\\\"href\\\":\\\"https:\\\/\\\/ok12static.oktacdn.com\\\/assets\\\/img\\\/logos\\\/groups\\\/odyssey\\\/okta-medium.1a5ebe44c4244fb796c235d86b47e3bb.png\\\",\\\"type\\\":\\\"image\\\/png\\\"},{\\\"name\\\":\\\"large\\\",\\\"href\\\":\\\"https:\\\/\\\/ok12static.oktacdn.com\\\/assets\\\/img\\\/logos\\\/groups\\\/odyssey\\\/okta-large.d9cfbd8a00a4feac1aa5612ba02e99c0.png\\\",\\\"type\\\":\\\"image\\\/png\\\"}],\\\"users\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/groups\\\/00gc8o4dyVetkcpz65d6\\\/users\\\"},\\\"apps\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/groups\\\/00gc8o4dyVetkcpz65d6\\\/apps\\\"}}}\",\"body\":null,\"statusCode\":200},{\"string\":\"{\\\"id\\\":\\\"00gg72ykwpCYwBRK35d6\\\",\\\"created\\\":\\\"2021-04-01T13:48:36.000Z\\\",\\\"lastUpdated\\\":\\\"2021-04-01T13:48:36.000Z\\\",\\\"lastMembershipUpdated\\\":\\\"2021-04-01T13:50:10.000Z\\\",\\\"objectClass\\\":[\\\"okta:user_group\\\"],\\\"type\\\":\\\"OKTA_GROUP\\\",\\\"profile\\\":{\\\"name\\\":\\\"iwaos2\\\",\\\"description\\\":\\\"le 2e club des iwao\\\"},\\\"_links\\\":{\\\"logo\\\":[{\\\"name\\\":\\\"medium\\\",\\\"href\\\":\\\"https:\\\/\\\/ok12static.oktacdn.com\\\/assets\\\/img\\\/logos\\\/groups\\\/odyssey\\\/okta-medium.1a5ebe44c4244fb796c235d86b47e3bb.png\\\",\\\"type\\\":\\\"image\\\/png\\\"},{\\\"name\\\":\\\"large\\\",\\\"href\\\":\\\"https:\\\/\\\/ok12static.oktacdn.com\\\/assets\\\/img\\\/logos\\\/groups\\\/odyssey\\\/okta-large.d9cfbd8a00a4feac1aa5612ba02e99c0.png\\\",\\\"type\\\":\\\"image\\\/png\\\"}],\\\"users\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/groups\\\/00gg72ykwpCYwBRK35d6\\\/users\\\"},\\\"apps\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/groups\\\/00gg72ykwpCYwBRK35d6\\\/apps\\\"}}}\",\"body\":null,\"statusCode\":200},{\"string\":\"{\\\"id\\\":\\\"00gg632lyOwAGN8Jn5d6\\\",\\\"created\\\":\\\"2021-04-01T09:49:20.000Z\\\",\\\"lastUpdated\\\":\\\"2021-04-01T09:52:21.000Z\\\",\\\"lastMembershipUpdated\\\":\\\"2021-04-01T09:50:15.000Z\\\",\\\"objectClass\\\":[\\\"okta:user_group\\\"],\\\"type\\\":\\\"OKTA_GROUP\\\",\\\"profile\\\":{\\\"name\\\":\\\"meuniers\\\",\\\"description\\\":\\\"le gang des meunier\\\"},\\\"_links\\\":{\\\"logo\\\":[{\\\"name\\\":\\\"medium\\\",\\\"href\\\":\\\"https:\\\/\\\/ok12static.oktacdn.com\\\/assets\\\/img\\\/logos\\\/groups\\\/odyssey\\\/okta-medium.1a5ebe44c4244fb796c235d86b47e3bb.png\\\",\\\"type\\\":\\\"image\\\/png\\\"},{\\\"name\\\":\\\"large\\\",\\\"href\\\":\\\"https:\\\/\\\/ok12static.oktacdn.com\\\/assets\\\/img\\\/logos\\\/groups\\\/odyssey\\\/okta-large.d9cfbd8a00a4feac1aa5612ba02e99c0.png\\\",\\\"type\\\":\\\"image\\\/png\\\"}],\\\"users\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/groups\\\/00gg632lyOwAGN8Jn5d6\\\/users\\\"},\\\"apps\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/groups\\\/00gg632lyOwAGN8Jn5d6\\\/apps\\\"}}}\",\"body\":null,\"statusCode\":200}]"},{"string":"{\"lastUpdated\":\"2021-04-14T08:03:52.000Z\",\"gateways\":null,\"system\":true,\"_links\":{\"self\":{\"hints\":{\"allow\":[\"GET\",\"PUT\",\"DELETE\"]},\"href\":\"https:\\\/\\\/lyvoc-migration-a.okta.com\\\/api\\\/v1\\\/zones\\\/nzol0y0l1pClUKwQK5d6\"},\"deactivate\":{\"hints\":{\"allow\":[\"POST\"]},\"href\":\"https:\\\/\\\/lyvoc-migration-a.okta.com\\\/api\\\/v1\\\/zones\\\/nzol0y0l1pClUKwQK5d6\\\/lifecycle\\\/deactivate\"}},\"created\":\"2021-04-14T08:03:52.000Z\",\"usage\":\"BLOCKLIST\",\"name\":\"BlockedIpZone\",\"proxies\":null,\"id\":\"nzol0y0l1pClUKwQK5d6\",\"type\":\"IP\",\"status\":\"ACTIVE\"}"},{"string":"{\"lastUpdated\":\"2021-04-14T08:03:52.000Z\",\"gateways\":null,\"system\":true,\"_links\":{\"self\":{\"hints\":{\"allow\":[\"GET\",\"PUT\",\"DELETE\"]},\"href\":\"https:\\\/\\\/lyvoc-migration-a.okta.com\\\/api\\\/v1\\\/zones\\\/nzol0y0l0meWPTSq15d6\"},\"deactivate\":{\"hints\":{\"allow\":[\"POST\"]},\"href\":\"https:\\\/\\\/lyvoc-migration-a.okta.com\\\/api\\\/v1\\\/zones\\\/nzol0y0l0meWPTSq15d6\\\/lifecycle\\\/deactivate\"}},\"created\":\"2021-04-14T08:03:52.000Z\",\"usage\":\"POLICY\",\"name\":\"LegacyIpZone\",\"proxies\":null,\"id\":\"nzol0y0l0meWPTSq15d6\",\"type\":\"IP\",\"status\":\"ACTIVE\"}"},{"string":"{\"lastUpdated\":\"2021-04-16T08:46:18.000Z\",\"gateways\":[{\"type\":\"RANGE\",\"value\":\"81.250.130.213-81.250.130.213\"}],\"system\":false,\"_links\":{\"self\":{\"hints\":{\"allow\":[\"GET\",\"PUT\",\"DELETE\"]},\"href\":\"https:\\\/\\\/lyvoc-migration-a.okta.com\\\/api\\\/v1\\\/zones\\\/nzolarp71aadfgqGH5d6\"},\"deactivate\":{\"hints\":{\"allow\":[\"POST\"]},\"href\":\"https:\\\/\\\/lyvoc-migration-a.okta.com\\\/api\\\/v1\\\/zones\\\/nzolarp71aadfgqGH5d6\\\/lifecycle\\\/deactivate\"}},\"created\":\"2021-04-16T08:46:18.000Z\",\"usage\":\"POLICY\",\"name\":\"zone1\",\"proxies\":null,\"id\":\"nzolarp71aadfgqGH5d6\",\"type\":\"IP\",\"status\":\"ACTIVE\"}"},{"string":"[{\"string\":\"[{\\\"id\\\":\\\"ftrFuiU28SetpA430t3m\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Netsuite Group Push Enhancements\\\",\\\"description\\\":\\\"Enables Group Push Enhancements for Netsuite\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFuiU28SetpA430t3m\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFuiU28SetpA430t3m\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFuiU28SetpA430t3m\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFuiU28SetpA430t3m\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrakbavqCelO68iG6gj\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Admin Email Subscription API\\\",\\\"description\\\":\\\"Allows access to the API endpoint for managing admin email notification subscriptions.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/developer.okta.com\\\/docs\\\/reference\\\/api\\\/admin-notifications\\\/\\\"},\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrakbavqCelO68iG6gj\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrakbavqCelO68iG6gj\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrakbavqCelO68iG6gj\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrakbavqCelO68iG6gj\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrHewADkiBDXlDF6RqZ\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Enable advanced custom properties for Litmos\\\",\\\"description\\\":\\\"Allow manage advanced custom properties for Litmos users\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrHewADkiBDXlDF6RqZ\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrHewADkiBDXlDF6RqZ\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrHewADkiBDXlDF6RqZ\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrHewADkiBDXlDF6RqZ\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftr6iaPrOm0VfDxboHl9\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"SAML 2.0 Assertion grant\\\",\\\"description\\\":\\\"Allow a client to get OAuth2 tokens by supplying a valid, signed SAML assertion to the Okta authorization server\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6iaPrOm0VfDxboHl9\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6iaPrOm0VfDxboHl9\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6iaPrOm0VfDxboHl9\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6iaPrOm0VfDxboHl9\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrFDVSQ9wBWPnDqohOS\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Allow end-users to quickly access everyday apps\\\",\\\"description\\\":\\\"End-users can find recently used apps in a separate Quick Access section on their dashboard. This section only appears if the user has 13+ apps assigned on their dashboard.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFDVSQ9wBWPnDqohOS\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFDVSQ9wBWPnDqohOS\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFDVSQ9wBWPnDqohOS\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrFDVSQ9wBWPnDqohOS\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftr5N5z7JMPKIXdyelVm\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Event Hook Preview\\\",\\\"description\\\":\\\"This feature lets you preview and test an event hook.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/help.okta.com\\\/en\\\/prod\\\/Content\\\/Topics\\\/automation-hooks\\\/event-hooks-preview.htm\\\"},\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr5N5z7JMPKIXdyelVm\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr5N5z7JMPKIXdyelVm\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr5N5z7JMPKIXdyelVm\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr5N5z7JMPKIXdyelVm\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftr02ksFB76Vla0gGMRm\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"New End User Experience\\\",\\\"description\\\":\\\"Enables new design and enhanced user experience for the Okta End-User Dashboard and the Okta Browser Plugin. Includes usability enhancements including single-page experience, mobile-responsiveness, and sidebar nav.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/help.okta.com\\\/en\\\/prod\\\/okta_help_CSH.htm#csh-new-eu-dashboard\\\"},\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr02ksFB76Vla0gGMRm\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr02ksFB76Vla0gGMRm\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr02ksFB76Vla0gGMRm\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr02ksFB76Vla0gGMRm\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrLAiTqBaYmlwecuPNt\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Enable incremental import feature for OPP and SCIM\\\",\\\"description\\\":\\\"This feature allows incremental imports for OPP and SCIM\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrLAiTqBaYmlwecuPNt\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrLAiTqBaYmlwecuPNt\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrLAiTqBaYmlwecuPNt\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrLAiTqBaYmlwecuPNt\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrnPfHKVExJ4Q3anBOT\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Enable Okta Expression Language for manager attribute mapping for Facebook at Work\\\",\\\"description\\\":\\\"Enable Okta Expression Language for manager attribute mapping for Facebook at Work\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrnPfHKVExJ4Q3anBOT\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrnPfHKVExJ4Q3anBOT\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrnPfHKVExJ4Q3anBOT\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrnPfHKVExJ4Q3anBOT\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrdKQf7XekAhREpDhD5\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"ADSSO authentication progress screen improvement feature flag\\\",\\\"description\\\":\\\"Applies the improved authentication progress screens to the existing Agentless Desktop Single Sign-on (ADSSO) process.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrdKQf7XekAhREpDhD5\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrdKQf7XekAhREpDhD5\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrdKQf7XekAhREpDhD5\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrdKQf7XekAhREpDhD5\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrQm81zrOvyCmjYQhhY\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Â Password Changed Email Notifications\\\",\\\"description\\\":\\\"End users receive an email notification if they change or reset the password for their account.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/help.okta.com\\\/en\\\/prod\\\/Content\\\/Topics\\\/Security\\\/Security_General.htm\\\"},\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrQm81zrOvyCmjYQhhY\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrQm81zrOvyCmjYQhhY\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrQm81zrOvyCmjYQhhY\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrQm81zrOvyCmjYQhhY\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrP5Y6UnDOL0jcolufm\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Public API for Custom Domains\\\",\\\"description\\\":\\\"Allows access to the API endpoint for replacing the Okta domain name with your own domain name\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/developer.okta.com\\\/docs\\\/reference\\\/api\\\/domains\\\"},\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrP5Y6UnDOL0jcolufm\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrP5Y6UnDOL0jcolufm\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrP5Y6UnDOL0jcolufm\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrP5Y6UnDOL0jcolufm\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrsw2hLw9dZwMO67jfe\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"New Entry Path For App Wizard\\\",\\\"description\\\":\\\"Allow the new re-designed entry path into the Create App Wizard flow\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrsw2hLw9dZwMO67jfe\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrsw2hLw9dZwMO67jfe\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrsw2hLw9dZwMO67jfe\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrsw2hLw9dZwMO67jfe\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrfisuCpvhv6WjVLdEg\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Org Management API\\\",\\\"description\\\":\\\"Allows access to the API endpoint for managing your org account settings such as contact information, granting Okta Support access, and more.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/developer.okta.com\\\/docs\\\/reference\\\/api\\\/org\\\/\\\"},\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrfisuCpvhv6WjVLdEg\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrfisuCpvhv6WjVLdEg\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrfisuCpvhv6WjVLdEg\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrfisuCpvhv6WjVLdEg\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrA8DDw6ETiCpVf43nk\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"App configuration API access\\\",\\\"description\\\":\\\"Enable API access to allow setting advanced application properties\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrA8DDw6ETiCpVf43nk\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrA8DDw6ETiCpVf43nk\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrA8DDw6ETiCpVf43nk\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrA8DDw6ETiCpVf43nk\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrEwoikBYnXHSsHydqF\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Allows to select custom users statuses to be considered as active\\\",\\\"description\\\":\\\"Enable custom active user statuses so custom user statuses can be treated as active in Okta\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrEwoikBYnXHSsHydqF\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrEwoikBYnXHSsHydqF\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrEwoikBYnXHSsHydqF\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrEwoikBYnXHSsHydqF\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrbVk2fMWl77TsS5xx4\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Use the default user profile for Org2Org\\\",\\\"description\\\":\\\"Enable using the default user profile only for Org2Org\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrbVk2fMWl77TsS5xx4\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrbVk2fMWl77TsS5xx4\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrbVk2fMWl77TsS5xx4\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrbVk2fMWl77TsS5xx4\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrcqkt9Qv0z770PfQCZ\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"New App Wizard Forms for OIDC Apps\\\",\\\"description\\\":\\\"Enables the newly designed App Wizard Form for OIDC Apps\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrcqkt9Qv0z770PfQCZ\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrcqkt9Qv0z770PfQCZ\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrcqkt9Qv0z770PfQCZ\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrcqkt9Qv0z770PfQCZ\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrygtN0AtAqTxM5B4X9\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Allow end-users to quickly access everyday apps in the Okta Browser Plugin\\\",\\\"description\\\":\\\"End-users can find recently used apps in a separate Quick Access tab in their Okta Browser Plugin.\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/help.okta.com\\\/en\\\/prod\\\/okta_help_CSH.htm#csh-eu-quick-access-apps\\\"},\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrygtN0AtAqTxM5B4X9\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrygtN0AtAqTxM5B4X9\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrygtN0AtAqTxM5B4X9\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrygtN0AtAqTxM5B4X9\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrBHwu7zlwMV137CMI1\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Factor Page Custom Help Links\\\",\\\"description\\\":\\\"Enable ability to insert custom help links on the MFA factor verification pages for the Sign-in Widget\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrBHwu7zlwMV137CMI1\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrBHwu7zlwMV137CMI1\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrBHwu7zlwMV137CMI1\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrBHwu7zlwMV137CMI1\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftrx7M0KD5wo9cpIwS7I\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Updated Group Membership UX\\\",\\\"description\\\":\\\"We have an Updated UX for managing users in Groups within Okta Admin console with improved searching at scale, making it easier to add and remove users from groups.\\\",\\\"stage\\\":{\\\"value\\\":\\\"BETA\\\",\\\"state\\\":\\\"OPEN\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/support.okta.com\\\/help\\\/s\\\/article\\\/updated-group-membership-ux\\\"},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrx7M0KD5wo9cpIwS7I\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrx7M0KD5wo9cpIwS7I\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftrx7M0KD5wo9cpIwS7I\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftr6L9LO627ONOo90LuJ\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Refresh token rotation\\\",\\\"description\\\":\\\"Allow a new refresh token to be returned every time a client exchanges a refresh token to get a new access token\\\",\\\"stage\\\":{\\\"value\\\":\\\"EA\\\"},\\\"_links\\\":{\\\"enable\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6L9LO627ONOo90LuJ\\\/enable\\\",\\\"hints\\\":{\\\"allow\\\":[\\\"POST\\\"]}},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6L9LO627ONOo90LuJ\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6L9LO627ONOo90LuJ\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr6L9LO627ONOo90LuJ\\\/dependencies\\\"}}},{\\\"id\\\":\\\"ftr63lbkxEXc4aO5kt5l\\\",\\\"type\\\":\\\"self-service\\\",\\\"status\\\":\\\"DISABLED\\\",\\\"name\\\":\\\"Windows Autopilot Enrollment Policy\\\",\\\"description\\\":\\\"IT admins will have the capability to create contextual access policies for Windows Autopilot Enrollment requests. \\\",\\\"stage\\\":{\\\"value\\\":\\\"BETA\\\",\\\"state\\\":\\\"OPEN\\\"},\\\"_links\\\":{\\\"helpDoc\\\":{\\\"href\\\":\\\"https:\\\/\\\/okta.box.com\\\/v\\\/WindowsAutopilot\\\"},\\\"self\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr63lbkxEXc4aO5kt5l\\\"},\\\"dependents\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr63lbkxEXc4aO5kt5l\\\/dependents\\\"},\\\"dependencies\\\":{\\\"href\\\":\\\"https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/features\\\/ftr63lbkxEXc4aO5kt5l\\\/dependencies\\\"}}}]\",\"body\":null,\"statusCode\":200}]"},{"string":"[{\"string\":null,\"body\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<root><root><id>ra1bumqma24ErRQUb5d6<\\\/id><label>Super Organization Administrator<\\\/label><type>SUPER_ADMIN<\\\/type><status>ACTIVE<\\\/status><created>2021-03-16T15:14:56.000Z<\\\/created><lastUpdated>2021-03-16T15:14:56.000Z<\\\/lastUpdated><assignmentType>USER<\\\/assignmentType><_links><assignee><href>https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/users\\\/00ubumqm8EyzHUkDi5d6<\\\/href><\\\/assignee><\\\/_links><\\\/root><\\\/root>\",\"statusCode\":200},{\"string\":null,\"body\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<root><root><id>ra1by4tspdQSVhxMA5d6<\\\/id><label>Super Organization Administrator<\\\/label><type>SUPER_ADMIN<\\\/type><status>ACTIVE<\\\/status><created>2021-03-17T11:16:31.000Z<\\\/created><lastUpdated>2021-03-17T11:16:31.000Z<\\\/lastUpdated><assignmentType>USER<\\\/assignmentType><_links><assignee><href>https:\\\/\\\/lyvoc-migrationa.okta.com\\\/api\\\/v1\\\/users\\\/00uby5aoafG52fO825d6<\\\/href><\\\/assignee><\\\/_links><\\\/root><\\\/root>\",\"statusCode\":200}]"},{"string":"[{\"string\":null,\"body\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<root\\\/>\",\"statusCode\":200},{\"string\":null,\"body\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<root\\\/>\",\"statusCode\":200},{\"string\":null,\"body\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<root\\\/>\",\"statusCode\":200},{\"string\":null,\"body\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<root\\\/>\",\"statusCode\":200}]"}]